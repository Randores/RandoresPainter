/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 socraticphoenix@gmail.com
 * Copyright (c) 2016 contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.gmail.socraticphoenix.forge.randores.painter.texture.gui;

import com.gmail.socraticphoenix.forge.randores.painter.gui.ErrorScreen;
import com.gmail.socraticphoenix.forge.randores.painter.texture.image.TemplateTexture;
import com.gmail.socraticphoenix.forge.randores.painter.texture.image.Texture;
import com.google.common.io.Files;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.Font;
import java.awt.Insets;
import java.io.IOException;
import java.util.List;

public class SelectTemplateScreen {
    private JComboBox comboBox1;
    private JComboBox comboBox2;
    private JPanel panel1;
    private JButton copyButton;

    private JFrame frame;

    private TextureScreen screen;
    private boolean image;

    public SelectTemplateScreen(TextureScreen screen, boolean image) {
        this.screen = screen;
        this.image = image;

        List<Texture> textures = screen.project.getTextures();

        this.comboBox1.setRenderer(new TextureScreen.TextureCellRenderer());
        this.comboBox2.setRenderer(new TextureScreen.TextureCellRenderer());

        for (Texture texture : textures) {
            if (texture instanceof TemplateTexture) {
                if (image) {
                    if (texture.getFile().exists()) {
                        comboBox1.addItem(texture);
                    } else {
                        comboBox2.addItem(texture);
                    }
                } else {
                    if (texture.getFile().exists()) {
                        comboBox1.addItem(texture);
                        comboBox2.addItem(texture);
                    }
                }
            }
        }
    }

    public JFrame display() {
        if (this.frame == null) {
            this.copyButton.addActionListener(e -> {
                TemplateTexture from = (TemplateTexture) this.comboBox1.getSelectedItem();
                TemplateTexture to = (TemplateTexture) this.comboBox2.getSelectedItem();
                try {
                    if (image) {
                        Files.copy(from.getFile(), to.getFile());
                    }
                    to.getState().getStates().clear();
                    to.getState().getStates().addAll(from.getState().getStates());
                    this.screen.updateListData();
                    this.frame.dispose();
                } catch (IOException e1) {
                    e1.printStackTrace();
                    this.frame.dispose();
                    new ErrorScreen("Unable to copy image: " + e1.getMessage()).display();
                }
            });
            this.frame = new JFrame("Select Template");
            this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            this.frame.setSize(600, 300);
            this.frame.add(this.panel1);
            this.frame.setVisible(true);
            return this.frame;
        } else {
            this.frame.setVisible(true);
            return this.frame;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        comboBox1 = new JComboBox();
        panel1.add(comboBox1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox2 = new JComboBox();
        panel1.add(comboBox2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 16));
        label1.setText("Copy From:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setFont(new Font(label2.getFont().getName(), label2.getFont().getStyle(), 16));
        label2.setText("Copy To:");
        panel1.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copyButton = new JButton();
        copyButton.setFont(new Font(copyButton.getFont().getName(), copyButton.getFont().getStyle(), 16));
        copyButton.setText("Copy");
        panel1.add(copyButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
